/*
Задание 1
• Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

• Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

{
title: "Название альбома",
artist: "Исполнитель",
year: "Год выпуска"
}

• Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
• Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)
*/

//Создаем объект musicCollection, содержащий массив с альбомами
const musicCollection = {
    albums: [
        { title: "Abbey Road", artist: "The Beatles", year: 1969 },
        { title: "Back in Black", artist: "AC/DC", year: 1980 },
        { title: "Thriller", artist: "Michael Jackson", year: 1982 },
        { title: "The Dark Side of the Moon", artist: "Pink Floyd", year: 1973 },
    ],

    //Метод Symbol.iterator  - делает объект итерируемым
    [Symbol.iterator]() {
        //Определяем index текущей итерации и albums присваиваем ссылку на this.albums
        let index = 0;
        const albums = this.albums;
        return {
            next() {
                if (index < albums.length) {
                    //Если индекс < размера массива, возвращаем элемент массива[index] и увеличиваем index на 1, done: false - итерация не завершена
                    return {value: albums[index++], done: false};
                } else {
                    //Итерация завершена
                    return { done: true };
                }
            }
        }
    }
}

console.log("Задание 1: \n")
for (const album of musicCollection) {
    console.log(`${album.title} - ${album.artist} (${album.year})`);
}

/*
Задание 2
Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

Необходимо создать систему управления этими заказами, которая позволит:

• Отслеживать, какой повар готовит какое блюдо.
• Записывать, какие блюда заказал каждый клиент.

Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

Повара и их специализации:

Виктор - специализация: Пицца.
Ольга - специализация: Суши.
Дмитрий - специализация: Десерты.

Блюда и их повара:

Пицца "Маргарита" - повар: Виктор.
Пицца "Пепперони" - повар: Виктор.
Суши "Филадельфия" - повар: Ольга.
Суши "Калифорния" - повар: Ольга.
Тирамису - повар: Дмитрий.
Чизкейк - повар: Дмитрий.

Заказы:

Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
Клиент Ирина заказала: Чизкейк.
*/

const specialization = new Map([
    ["Виктор", "Пицца"],
    ["Ольга", "Суши"],
    ["Дмитрий", "Десерты"]
]);

const dishes = new Map([
    ["Пицца 'Марагирта'", "Виктор"],
    ["Пицца 'Пепперони'", "Виктор"],
    ["Суши 'Филадельфия'", "Ольга"],
    ["Суши 'Калифорния'", "Ольга"],
    ["Тирамису", "Дмитрий"],
    ["Чизкейк", "Дмитрий"]
]);

const visitor1 = {
    name: "Алексей"
};

const visitor2 = {
    name: "Мария"
};

const visitor3 = {
    name: "Ирина"
};

const orders = new Map([
    [visitor1, ["Пицца 'Пепперони'", "Тирамису"]],
    [visitor2, ["Суши 'Калифорния'", "Пицца 'Марагирта'"]],
    [visitor3, ["Чизкейк"]]
]);

function displayOrders() {
    orders.forEach((orderedDishes, client) => {
        console.log(`Заказ клиента ${client.name}:`);
        orderedDishes.forEach(dish => {
            const chef = dishes.get(dish);
            console.log(`  - ${dish} (готовит ${chef})`);
        });
    });
}

displayOrders();
